{"remainingRequest":"C:\\Users\\IDANGELES\\Documents\\UD\\Tesis\\WEB\\Front\\node_modules\\vue-loader\\lib\\loaders\\templateLoader.js??vue-loader-options!C:\\Users\\IDANGELES\\Documents\\UD\\Tesis\\WEB\\Front\\node_modules\\vuetify-loader\\lib\\loader.js??ref--18-0!C:\\Users\\IDANGELES\\Documents\\UD\\Tesis\\WEB\\Front\\node_modules\\cache-loader\\dist\\cjs.js??ref--0-0!C:\\Users\\IDANGELES\\Documents\\UD\\Tesis\\WEB\\Front\\node_modules\\vue-loader\\lib\\index.js??vue-loader-options!C:\\Users\\IDANGELES\\Documents\\UD\\Tesis\\WEB\\Front\\src\\views\\Reports.vue?vue&type=template&id=ff4e9e16&scoped=true&","dependencies":[{"path":"C:\\Users\\IDANGELES\\Documents\\UD\\Tesis\\WEB\\Front\\src\\views\\Reports.vue","mtime":1597515831807},{"path":"C:\\Users\\IDANGELES\\Documents\\UD\\Tesis\\WEB\\Front\\node_modules\\cache-loader\\dist\\cjs.js","mtime":499162500000},{"path":"C:\\Users\\IDANGELES\\Documents\\UD\\Tesis\\WEB\\Front\\node_modules\\vue-loader\\lib\\loaders\\templateLoader.js","mtime":499162500000},{"path":"C:\\Users\\IDANGELES\\Documents\\UD\\Tesis\\WEB\\Front\\node_modules\\vuetify-loader\\lib\\loader.js","mtime":1574476662000},{"path":"C:\\Users\\IDANGELES\\Documents\\UD\\Tesis\\WEB\\Front\\node_modules\\cache-loader\\dist\\cjs.js","mtime":499162500000},{"path":"C:\\Users\\IDANGELES\\Documents\\UD\\Tesis\\WEB\\Front\\node_modules\\vue-loader\\lib\\index.js","mtime":499162500000}],"contextDependencies":[],"result":[{"type":"Buffer","data":"base64:dmFyIHJlbmRlciA9IGZ1bmN0aW9uKCkgewogIHZhciBfdm0gPSB0aGlzCiAgdmFyIF9oID0gX3ZtLiRjcmVhdGVFbGVtZW50CiAgdmFyIF9jID0gX3ZtLl9zZWxmLl9jIHx8IF9oCiAgcmV0dXJuIF9jKAogICAgInYtY29udGFpbmVyIiwKICAgIFsKICAgICAgX2MoCiAgICAgICAgInYtcm93IiwKICAgICAgICB7IHN0YXRpY0NsYXNzOiAibXQtNSIgfSwKICAgICAgICBbCiAgICAgICAgICBfYygKICAgICAgICAgICAgInYtY29sIiwKICAgICAgICAgICAgeyBhdHRyczogeyBjb2xzOiAiNiIgfSB9LAogICAgICAgICAgICBbCiAgICAgICAgICAgICAgX2MoCiAgICAgICAgICAgICAgICAidi10b29sYmFyIiwKICAgICAgICAgICAgICAgIFsKICAgICAgICAgICAgICAgICAgX2MoInYtdG9vbGJhci10aXRsZSIsIFtfdm0uX3YoIlBpc2PDrWNvbGEiKV0pLAogICAgICAgICAgICAgICAgICBfYygidi1jb21ib2JveCIsIHsKICAgICAgICAgICAgICAgICAgICBzdGF0aWNDbGFzczogIm1hLTIiLAogICAgICAgICAgICAgICAgICAgIGF0dHJzOiB7CiAgICAgICAgICAgICAgICAgICAgICBjb2xvcjogIiMzMjVkNzkiLAogICAgICAgICAgICAgICAgICAgICAgc29sbzogIiIsCiAgICAgICAgICAgICAgICAgICAgICAiaGlkZS1kZXRhaWxzIjogIiIsCiAgICAgICAgICAgICAgICAgICAgICBsYWJlbDogIlNlbGVjY2lvbmFyIiwKICAgICAgICAgICAgICAgICAgICAgIGl0ZW1zOiBfdm0ucGlzY2ljb2xhcwogICAgICAgICAgICAgICAgICAgIH0sCiAgICAgICAgICAgICAgICAgICAgb246IHsKICAgICAgICAgICAgICAgICAgICAgIGNoYW5nZTogZnVuY3Rpb24oKSB7CiAgICAgICAgICAgICAgICAgICAgICAgIHJldHVybiBfdm0udXBkYXRlRXN0YW5xdWVzKCkKICAgICAgICAgICAgICAgICAgICAgIH0KICAgICAgICAgICAgICAgICAgICB9LAogICAgICAgICAgICAgICAgICAgIG1vZGVsOiB7CiAgICAgICAgICAgICAgICAgICAgICB2YWx1ZTogX3ZtLmlkX3Bpc2NpY29sYXMsCiAgICAgICAgICAgICAgICAgICAgICBjYWxsYmFjazogZnVuY3Rpb24oJCR2KSB7CiAgICAgICAgICAgICAgICAgICAgICAgIF92bS5pZF9waXNjaWNvbGFzID0gJCR2CiAgICAgICAgICAgICAgICAgICAgICB9LAogICAgICAgICAgICAgICAgICAgICAgZXhwcmVzc2lvbjogImlkX3Bpc2NpY29sYXMiCiAgICAgICAgICAgICAgICAgICAgfQogICAgICAgICAgICAgICAgICB9KQogICAgICAgICAgICAgICAgXSwKICAgICAgICAgICAgICAgIDEKICAgICAgICAgICAgICApCiAgICAgICAgICAgIF0sCiAgICAgICAgICAgIDEKICAgICAgICAgICksCiAgICAgICAgICBfYygKICAgICAgICAgICAgInYtY29sIiwKICAgICAgICAgICAgeyBhdHRyczogeyBjb2xzOiAiNiIgfSB9LAogICAgICAgICAgICBbCiAgICAgICAgICAgICAgX2MoCiAgICAgICAgICAgICAgICAidi10b29sYmFyIiwKICAgICAgICAgICAgICAgIFsKICAgICAgICAgICAgICAgICAgX2MoInYtdG9vbGJhci10aXRsZSIsIFtfdm0uX3YoIkVzdGFucXVlIildKSwKICAgICAgICAgICAgICAgICAgX2MoInYtY29tYm9ib3giLCB7CiAgICAgICAgICAgICAgICAgICAgc3RhdGljQ2xhc3M6ICJtYS0yIiwKICAgICAgICAgICAgICAgICAgICBhdHRyczogewogICAgICAgICAgICAgICAgICAgICAgY29sb3I6ICIjMzI1ZDc5IiwKICAgICAgICAgICAgICAgICAgICAgIHNvbG86ICIiLAogICAgICAgICAgICAgICAgICAgICAgImhpZGUtZGV0YWlscyI6ICIiLAogICAgICAgICAgICAgICAgICAgICAgbGFiZWw6ICJTZWxlY2Npb25hciIsCiAgICAgICAgICAgICAgICAgICAgICBpdGVtczogX3ZtLmVzdGFucXVlcwogICAgICAgICAgICAgICAgICAgIH0sCiAgICAgICAgICAgICAgICAgICAgb246IHsKICAgICAgICAgICAgICAgICAgICAgIGNoYW5nZTogZnVuY3Rpb24oKSB7CiAgICAgICAgICAgICAgICAgICAgICAgIHJldHVybiBfdm0udXBkYXRlRGF0YUNhbGN1bGFkYSgpCiAgICAgICAgICAgICAgICAgICAgICB9CiAgICAgICAgICAgICAgICAgICAgfSwKICAgICAgICAgICAgICAgICAgICBtb2RlbDogewogICAgICAgICAgICAgICAgICAgICAgdmFsdWU6IF92bS5pZF9lc3RhbnF1ZSwKICAgICAgICAgICAgICAgICAgICAgIGNhbGxiYWNrOiBmdW5jdGlvbigkJHYpIHsKICAgICAgICAgICAgICAgICAgICAgICAgX3ZtLmlkX2VzdGFucXVlID0gJCR2CiAgICAgICAgICAgICAgICAgICAgICB9LAogICAgICAgICAgICAgICAgICAgICAgZXhwcmVzc2lvbjogImlkX2VzdGFucXVlIgogICAgICAgICAgICAgICAgICAgIH0KICAgICAgICAgICAgICAgICAgfSkKICAgICAgICAgICAgICAgIF0sCiAgICAgICAgICAgICAgICAxCiAgICAgICAgICAgICAgKQogICAgICAgICAgICBdLAogICAgICAgICAgICAxCiAgICAgICAgICApLAogICAgICAgICAgX2MoCiAgICAgICAgICAgICJ2LWNvbCIsCiAgICAgICAgICAgIHsgYXR0cnM6IHsgY29sczogIjYiIH0gfSwKICAgICAgICAgICAgWwogICAgICAgICAgICAgIF9jKCJDYWxlbmRhciIsIHsKICAgICAgICAgICAgICAgIGF0dHJzOiB7IHRpdGxlOiAiSW5pY2lhbCIgfSwKICAgICAgICAgICAgICAgIG9uOiB7IHNlbGVjdGVkRGF0ZTogX3ZtLnNlbGVjdGVkSW5pdERhdGUgfQogICAgICAgICAgICAgIH0pCiAgICAgICAgICAgIF0sCiAgICAgICAgICAgIDEKICAgICAgICAgICksCiAgICAgICAgICBfYygKICAgICAgICAgICAgInYtY29sIiwKICAgICAgICAgICAgeyBhdHRyczogeyBjb2xzOiAiNiIgfSB9LAogICAgICAgICAgICBbCiAgICAgICAgICAgICAgX2MoIkNhbGVuZGFyIiwgewogICAgICAgICAgICAgICAgYXR0cnM6IHsgdGl0bGU6ICJGaW5hbCIgfSwKICAgICAgICAgICAgICAgIG9uOiB7IHNlbGVjdGVkRGF0ZTogX3ZtLnNlbGVjdGVkRmluYWxEYXRlIH0KICAgICAgICAgICAgICB9KQogICAgICAgICAgICBdLAogICAgICAgICAgICAxCiAgICAgICAgICApLAogICAgICAgICAgX2MoCiAgICAgICAgICAgICJ2LWNvbCIsCiAgICAgICAgICAgIHsgYXR0cnM6IHsgeHM6ICIxMiIsIHNtOiAiNiIgfSB9LAogICAgICAgICAgICBbCiAgICAgICAgICAgICAgX2MoCiAgICAgICAgICAgICAgICAidi1jYXJkIiwKICAgICAgICAgICAgICAgIHsKICAgICAgICAgICAgICAgICAgc3RhdGljQ2xhc3M6ICJweC0yIG14LWF1dG8iLAogICAgICAgICAgICAgICAgICBhdHRyczogeyB3aWR0aDogIjM1MHB4Iiwgc2hhcGVkOiAiIiB9CiAgICAgICAgICAgICAgICB9LAogICAgICAgICAgICAgICAgWwogICAgICAgICAgICAgICAgICBfYygidi1jYXJkLXRpdGxlIiwgW192bS5fdigiUmVwb3J0ZSBkZSBJbmRpY2Fkb3JlcyIpXSksCiAgICAgICAgICAgICAgICAgIF9jKCJ2LWNhcmQtdGV4dCIsIFsKICAgICAgICAgICAgICAgICAgICBfdm0uX3YoCiAgICAgICAgICAgICAgICAgICAgICAiU2UgZ2VuZXJhcsOhIHVuIHJlcG9ydGUgZW4gZm9ybWF0byAuY3N2IGNvbiBsb3MgaW5kaWNhZG9yZXMgKGF2ZywgbcOtbiwgbcOheCkgZGVsIMO6bHRpbW8gbWVzLCDDumx0aW1hIHNlbWFuYSwgZMOtYSBhbnRlcmlvciB5IGTDrWEgYWN0dWFsIgogICAgICAgICAgICAgICAgICAgICkKICAgICAgICAgICAgICAgICAgXSksCiAgICAgICAgICAgICAgICAgIF9jKAogICAgICAgICAgICAgICAgICAgICJ2LWNhcmQtYWN0aW9ucyIsCiAgICAgICAgICAgICAgICAgICAgWwogICAgICAgICAgICAgICAgICAgICAgX2MoInYtc3BhY2VyIiksCiAgICAgICAgICAgICAgICAgICAgICBfYygKICAgICAgICAgICAgICAgICAgICAgICAgImRvd25sb2FkLWNzdiIsCiAgICAgICAgICAgICAgICAgICAgICAgIHsKICAgICAgICAgICAgICAgICAgICAgICAgICBhdHRyczogewogICAgICAgICAgICAgICAgICAgICAgICAgICAgZGF0YTogX3ZtLmRhdGFDYWxjdWxhZGFmdWxsLAogICAgICAgICAgICAgICAgICAgICAgICAgICAgbmFtZTogIkluZGljYWRvcmVzLmNzdiIKICAgICAgICAgICAgICAgICAgICAgICAgICB9CiAgICAgICAgICAgICAgICAgICAgICAgIH0sCiAgICAgICAgICAgICAgICAgICAgICAgIFsKICAgICAgICAgICAgICAgICAgICAgICAgICBfYygKICAgICAgICAgICAgICAgICAgICAgICAgICAgICJ2LWJ0biIsCiAgICAgICAgICAgICAgICAgICAgICAgICAgICB7IGF0dHJzOiB7IGNvbG9yOiAiIzMyNWQ3OSIsIG91dGxpbmVkOiAiIiB9IH0sCiAgICAgICAgICAgICAgICAgICAgICAgICAgICBbX3ZtLl92KCJEZXNjYXJnYXIiKV0KICAgICAgICAgICAgICAgICAgICAgICAgICApCiAgICAgICAgICAgICAgICAgICAgICAgIF0sCiAgICAgICAgICAgICAgICAgICAgICAgIDEKICAgICAgICAgICAgICAgICAgICAgICkKICAgICAgICAgICAgICAgICAgICBdLAogICAgICAgICAgICAgICAgICAgIDEKICAgICAgICAgICAgICAgICAgKQogICAgICAgICAgICAgICAgXSwKICAgICAgICAgICAgICAgIDEKICAgICAgICAgICAgICApCiAgICAgICAgICAgIF0sCiAgICAgICAgICAgIDEKICAgICAgICAgICksCiAgICAgICAgICBfYygKICAgICAgICAgICAgInYtY29sIiwKICAgICAgICAgICAgeyBhdHRyczogeyB4czogIjEyIiwgc206ICI2IiB9IH0sCiAgICAgICAgICAgIFsKICAgICAgICAgICAgICBfYygKICAgICAgICAgICAgICAgICJ2LWNhcmQiLAogICAgICAgICAgICAgICAgewogICAgICAgICAgICAgICAgICBzdGF0aWNDbGFzczogInB4LTIgbXgtYXV0byIsCiAgICAgICAgICAgICAgICAgIGF0dHJzOiB7IHdpZHRoOiAiMzUwcHgiLCBzaGFwZWQ6ICIiIH0KICAgICAgICAgICAgICAgIH0sCiAgICAgICAgICAgICAgICBbCiAgICAgICAgICAgICAgICAgIF9jKCJ2LWNhcmQtdGl0bGUiLCBbCiAgICAgICAgICAgICAgICAgICAgX3ZtLl92KCJSZXBvcnRlIEhpc3TDs3JpY28gZGUgTWVkaWNpb25lcyIpCiAgICAgICAgICAgICAgICAgIF0pLAogICAgICAgICAgICAgICAgICBfYygidi1jYXJkLXRleHQiLCBbCiAgICAgICAgICAgICAgICAgICAgX3ZtLl92KAogICAgICAgICAgICAgICAgICAgICAgIlNlIGdlbmVyYXLDoSB1biByZXBvcnRlIGVuIGZvcm1hdG8gLmNzdiBjb24gZWwgaGlzdMOzcmljbyBkZSBtZWRpY2lvbmVzIGRlbCBlc3RhbnF1ZSB5IHJhbmdvIGRlIGZlY2hhcyBzZWxlY2Npb25hZG8iCiAgICAgICAgICAgICAgICAgICAgKQogICAgICAgICAgICAgICAgICBdKSwKICAgICAgICAgICAgICAgICAgX2MoCiAgICAgICAgICAgICAgICAgICAgInYtY2FyZC1hY3Rpb25zIiwKICAgICAgICAgICAgICAgICAgICBbCiAgICAgICAgICAgICAgICAgICAgICBfYygidi1zcGFjZXIiKSwKICAgICAgICAgICAgICAgICAgICAgIF9jKAogICAgICAgICAgICAgICAgICAgICAgICAiZG93bmxvYWQtY3N2IiwKICAgICAgICAgICAgICAgICAgICAgICAgewogICAgICAgICAgICAgICAgICAgICAgICAgIGF0dHJzOiB7CiAgICAgICAgICAgICAgICAgICAgICAgICAgICBkYXRhOiBfdm0ubWVkaWNpb25lc2Z1bGwsCiAgICAgICAgICAgICAgICAgICAgICAgICAgICBuYW1lOiAiSGlzdG9yaWNvX01lZGljaW9uZXMuY3N2IgogICAgICAgICAgICAgICAgICAgICAgICAgIH0KICAgICAgICAgICAgICAgICAgICAgICAgfSwKICAgICAgICAgICAgICAgICAgICAgICAgWwogICAgICAgICAgICAgICAgICAgICAgICAgIF9jKAogICAgICAgICAgICAgICAgICAgICAgICAgICAgInYtYnRuIiwKICAgICAgICAgICAgICAgICAgICAgICAgICAgIHsgYXR0cnM6IHsgY29sb3I6ICIjMzI1ZDc5Iiwgb3V0bGluZWQ6ICIiIH0gfSwKICAgICAgICAgICAgICAgICAgICAgICAgICAgIFtfdm0uX3YoIkRlc2NhcmdhciIpXQogICAgICAgICAgICAgICAgICAgICAgICAgICkKICAgICAgICAgICAgICAgICAgICAgICAgXSwKICAgICAgICAgICAgICAgICAgICAgICAgMQogICAgICAgICAgICAgICAgICAgICAgKQogICAgICAgICAgICAgICAgICAgIF0sCiAgICAgICAgICAgICAgICAgICAgMQogICAgICAgICAgICAgICAgICApCiAgICAgICAgICAgICAgICBdLAogICAgICAgICAgICAgICAgMQogICAgICAgICAgICAgICkKICAgICAgICAgICAgXSwKICAgICAgICAgICAgMQogICAgICAgICAgKQogICAgICAgIF0sCiAgICAgICAgMQogICAgICApCiAgICBdLAogICAgMQogICkKfQp2YXIgc3RhdGljUmVuZGVyRm5zID0gW10KcmVuZGVyLl93aXRoU3RyaXBwZWQgPSB0cnVlCgpleHBvcnQgeyByZW5kZXIsIHN0YXRpY1JlbmRlckZucyB9"}]}